1.
Question 1
Which of these are correct ways to instantiate a function type. Select all that apply.

1 / 1 point

Using a callable reference to existing declaration using the ‘::’ operator

Correct
Correct! You can use a callable reference such as ‘::functionName’.


Using the function name.


Using instance of a user defined class that implements a function type as an interface.

Correct
Correct! You can instantiate a function using a defined class that implements a function type as an interface.


Using a lambda expression.

Correct
Correct! You can use a lambda expression to instantiate a function type.

2.
Question 2
Which of these is a correct usage of lambda expression for the given function definition?

123
fun execute(number: Int, function: (Int) -> String) {
 println(function(number))
}

0 / 1 point

execute(100) { "Score $it" }


execute("Score") { "$it 100" }


execute(100) ( "Score $it" )

Incorrect
Not quite. You need to pass an ‘Int’ argument first and then the lambda expression with the string. Check the video item ‘Lambda expressions’ to recap on your learning.

3.
Question 3
Which of the these is a correct lambda expression syntax?

1 / 1 point

val difference: (Int, Int) -> Int = x: Int, y: Int -> x - y


val difference: (Int, Int) -> Int = x: Int, y: Int -> { x - y }


val difference: (Int, Int) -> Int = { x: Int, y: Int -> x - y }

Correct
Correct! This is the correct syntax

4.
Question 4
Which listener interface provided by the Android framework is used to listen for a button press event?

1 / 1 point

View.OnClickListener


View.OnPressListener


View.OnTapListener

Correct
Correct! The ‘View’ class contains an interface ‘OnClickListener’ that has a method ‘onClick’ which gets called on events such as a button press.

5.
Question 5
Which of these are higher-order functions? Select all that apply.

0.25 / 1 point

fun display(): (Int) -> Unit


fun display(x: Int) : Unit


fun display(x: (Int)) -> Unit

This should not be selected
Not quite. You need to define the ‘->’ and the return type (in this case, ‘Unit’) inside the parenthesis. Please check video item ‘What is higher-order-function' to recap on your learning.


fun display(x: (Int) -> Unit)

6.
Question 6
What is the output of this code?


1234567
val number = 3
var output = 2
repeat(5) { index ->
 output += (index * number)
}
println(output)


1 / 1 point

32


30


47

Correct
Correct! You correctly calculated the output of the given code.

7.
Question 7
What is the output of the following code?


1234567
var sum = 0

val numberList = listOf(1, 4, 6, 7, 9) 
numberList.forEach { number ->
 sum += number
}
println(sum)

1 / 1 point

27


1


9

Correct
Correct! The above code would iterate over each element and then add each element’s value to variable named ‘sum’.

8.
Question 8
What is the output of this code:

1234567891011121314
data class Chocolate( 
 val flavor: String, 
 val price: Int 
) 
val list = listOf( 
 Chocolate("Dark", 7), 
 Chocolate("Milk", 4), 
 Chocolate("Coffee", 2) 
)
val output = list.map { 


1 / 1 point

[Dark, Milk, Coffee]


[Chocolate(flavor=Dark, price=7), Chocolate(flavor=Milk, price=4), Chocolate(flavor=Coffee, price=2)]


[7, 4, 2]

Correct
Correct! The above code transforms the initial list to a new list that contains values of 'flavor’.

9.
Question 9
What is the output of this code:

1234567891011121314
data class Chocolate( 
 val flavor: String, 
 val price: Int 
) 
val list = listOf( 
 Chocolate("Dark", 7), 
 Chocolate("Milk", 4), 
 Chocolate("Coffee", 2) 
)
val output = list.filter { 


1 / 1 point

[Chocolate(flavor=Dark, price=7), Chocolate(flavor=Milk, price=4)]


[Chocolate(flavor=Dark, price=7), Chocolate(flavor=Milk, price=4), Chocolate(flavor=Coffee, price=2)]


[Chocolate(flavor=Coffee, price=2)]

Correct
Correct! The code above filters the 'chocolate’ elements that have ‘price’ > 3, and returns a new list with only those elements that comply to the condition.

10.
Question 10
What is the output of this code: 

123456
val list = listOf(9, 3, 1, 6) 
val output = list.fold(1) { x, y -> 
 x + y 
} 
println(output)


1 / 1 point

20


1


18

Correct
Correct! The fold function accumulates a value starting from the initial value of ‘1’ and then applies the operation to each element in the list.